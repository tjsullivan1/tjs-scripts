# Example Terraform variables file
# Copy this to terraform.tfvars and customize for your deployment

# Required variables
location            = "East US 2"
resource_group_name = "rg-ai-landing-zone"

# Networking Configuration (optional)
# Set to true to use existing virtual network and subnet
# use_existing_network = true
# existing_vnet_name = "my-existing-vnet"
# existing_vnet_resource_group_name = "rg-networking"  # Optional: defaults to main resource group
# existing_subnet_name = "ai-subnet"

# Optional variables - uncomment and modify as needed
# ai_foundry_name      = "mycompany-ai"
# sku_name            = "S0"
# disable_local_auth  = false
# gpt_deployment_name = "gpt-4o"
# gpt_model_name      = "gpt-4o"
# gpt_model_version   = "2024-11-20"
# gpt_sku_name        = "GlobalStandard"
# gpt_capacity        = 1
# project_name        = "project"
# project_display_name = "AI Foundry Project"
# project_description = "AI Foundry project for machine learning workloads"

# CosmosDB Configuration
# cosmosdb_name = "my-ai-cosmosdb"

# Consistency policy (uncomment to customize)
# cosmosdb_consistency_policy = {
#   consistency_level       = "Session"
#   max_interval_in_seconds = 300
#   max_staleness_prefix    = 100000
# }

# Backup configuration (uncomment to customize)
# cosmosdb_backup = {
#   type                = "Periodic"
#   interval_in_minutes = 240
#   retention_in_hours  = 8
#   storage_redundancy  = "Geo"
# }

# Capabilities (uncomment as needed)
# cosmosdb_capabilities = [
#   "EnableAggregationPipeline"
# ]

# Custom database and container configuration
# cosmosdb_databases = [
#   {
#     name       = "ai-workloads"
#     throughput = 400
#     containers = [
#       {
#         name               = "training-datasets"
#         partition_key_path = "/datasetId"
#         throughput        = 400
#         default_ttl       = -1
#       },
#       {
#         name               = "model-artifacts"
#         partition_key_path = "/modelId"
#         throughput        = 400
#         default_ttl       = -1
#       },
#       {
#         name               = "inference-results"
#         partition_key_path = "/sessionId"
#         throughput        = 400
#         default_ttl       = 2592000  # 30 days
#       }
#     ]
#   }
# ]

# Global tags
# tags = {
#   Environment = "development"
#   Project     = "ai-landing-zone"
#   Owner       = "ai-team@company.com"
# }

# MongoDB Configuration (optional)
# Set to true to deploy CosmosDB MongoDB API alongside SQL API
# enable_mongodb = true
# cosmosdb_mongo_name = "my-ai-mongo-db"

# MongoDB consistency policy (uncomment to customize)
# cosmosdb_mongo_consistency_policy = {
#   consistency_level       = "Session"
#   max_interval_in_seconds = 300
#   max_staleness_prefix    = 100000
# }

# MongoDB backup configuration (uncomment to customize)
# cosmosdb_mongo_backup = {
#   type                = "Periodic"
#   interval_in_minutes = 240
#   retention_in_hours  = 8
#   storage_redundancy  = "Geo"
# }

# MongoDB capabilities (uncomment to customize)
# cosmosdb_mongo_capabilities = [
#   "EnableMongo",
#   "MongoDBv4.0",
#   "mongoEnableDocLevelTTL",
#   "EnableMongo16MBDocumentSupport"
# ]

# MongoDB network access (uncomment to customize)
# cosmosdb_mongo_public_access = true
# cosmosdb_mongo_ip_filter = [
#   "203.0.113.0/24",
#   "198.51.100.0/24"
# ]

# Custom MongoDB database and collection configuration
# cosmosdb_mongo_databases = [
#   {
#     name       = "ai-mongodb"
#     throughput = 400
#     collections = [
#       {
#         name                = "vector-store"
#         shard_key           = "document_id"
#         throughput          = 400
#         default_ttl_seconds = null
#         indexes = [
#           {
#             keys   = ["embedding_model"]
#             unique = false
#           },
#           {
#             keys   = ["document_id"]
#             unique = true
#           }
#         ]
#       },
#       {
#         name                = "chat-history"
#         shard_key           = "user_id"
#         throughput          = 400
#         default_ttl_seconds = 2592000  # 30 days
#         indexes = [
#           {
#             keys   = ["user_id", "session_id"]  # Must include shard key for unique indexes
#             unique = true
#           },
#           {
#             keys   = ["user_id", "timestamp"]
#             unique = false
#           }
#         ]
#       }
#     ]
#   }
# ]